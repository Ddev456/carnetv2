// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                    String  @id @default(cuid())
    userId                String
    type                  String
    provider              String
    providerAccountId     String
    refreshTokenExpiresIn String?
    refresh_token         String?
    access_token          String?
    expires_at            Int?
    token_type            String?
    scope                 String?
    id_token              String?
    session_state         String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now()) @map("created_at")

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    role String?

    accounts     Account[]
    sessions     Session[]
    plantsEvents Notification[]
    tasks        Task[]
}

enum CategoryType {
    LEGUMES
    FRUITIERS
    FLEURS
    AROMATIQUES
    ENGRAISVERTS
    AUTRES
}

enum PeriodType {
    COVERSOWING
    SOWING
    TRANSPLANTING
    PLANTING
    FLOWERING
    HARVESTING
}

model CulturePeriod {
    id         String     @id @default(cuid())
    startWeek  Int
    endWeek    Int
    periodType PeriodType
    plantId    String
    plant      Plant      @relation(fields: [plantId], references: [id])
}

model Plant {
    id               String          @id @default(cuid())
    name             String          @unique
    description      String
    advice           String[]
    thumbnail        String
    icon             String?
    type             String
    vegetationZero   Int
    optimalTemp      Int
    growingTime      Int
    readyToPlantTime Int
    exposition       Int
    water            Int
    spaceBetween     Int
    spaceOnRow       Int
    seedMinTemp      Int
    seedMaxTemp      Int
    seedDepth        Int
    emergence        Int
    nitrogenN        Int
    phosphorusP      Int
    potassiumK       Int
    level            Int
    efficiency       Int
    conservation     Int
    isHardiness      Boolean
    culturePeriods   CulturePeriod[]

    categoryType CategoryType @default(AUTRES)

    createdAt DateTime @default(now())
}

enum NotificationType {
    POTAGER
    JOURNAL
}

model Notification {
    id        String           @id @default(cuid())
    userId    String
    plantId   String?
    plantName String
    startDate DateTime         @default(now())
    type      NotificationType
    read      Boolean          @default(false)
    message   String
    removed   Boolean          @default(false)
    updatedAt DateTime         @default(now())
    user      User             @relation(fields: [userId], references: [id])
}

enum TaskCategory {
    ARROSAGE
    BOUTURAGE
    FLORAISON
    GERMINATION
    PLANTATION
    REMPOTAGE
    SEMISEXTERIEUR
    SEMISSOUSABRI
    TAILLE
    RECOLTE
    DIVERS
}

model Task {
    id          String       @id @default(cuid())
    description String?
    category    TaskCategory @default(DIVERS)
    startDate   DateTime     @default(now())
    plantId     String?
    userId      String
    isDone      Boolean      @default(false)

    updateAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
}
